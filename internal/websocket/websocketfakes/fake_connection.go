// Code generated by counterfeiter. DO NOT EDIT.
package websocketfakes

import (
	"chat/internal/websocket"
	"context"
	"sync"
)

type FakeConnection struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	ContextStub        func() context.Context
	contextMutex       sync.RWMutex
	contextArgsForCall []struct {
	}
	contextReturns struct {
		result1 context.Context
	}
	contextReturnsOnCall map[int]struct {
		result1 context.Context
	}
	ReadJSONStub        func(interface{}) error
	readJSONMutex       sync.RWMutex
	readJSONArgsForCall []struct {
		arg1 interface{}
	}
	readJSONReturns struct {
		result1 error
	}
	readJSONReturnsOnCall map[int]struct {
		result1 error
	}
	WriteJSONStub        func(interface{}) error
	writeJSONMutex       sync.RWMutex
	writeJSONArgsForCall []struct {
		arg1 interface{}
	}
	writeJSONReturns struct {
		result1 error
	}
	writeJSONReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConnection) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConnection) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeConnection) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeConnection) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConnection) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConnection) Context() context.Context {
	fake.contextMutex.Lock()
	ret, specificReturn := fake.contextReturnsOnCall[len(fake.contextArgsForCall)]
	fake.contextArgsForCall = append(fake.contextArgsForCall, struct {
	}{})
	stub := fake.ContextStub
	fakeReturns := fake.contextReturns
	fake.recordInvocation("Context", []interface{}{})
	fake.contextMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConnection) ContextCallCount() int {
	fake.contextMutex.RLock()
	defer fake.contextMutex.RUnlock()
	return len(fake.contextArgsForCall)
}

func (fake *FakeConnection) ContextCalls(stub func() context.Context) {
	fake.contextMutex.Lock()
	defer fake.contextMutex.Unlock()
	fake.ContextStub = stub
}

func (fake *FakeConnection) ContextReturns(result1 context.Context) {
	fake.contextMutex.Lock()
	defer fake.contextMutex.Unlock()
	fake.ContextStub = nil
	fake.contextReturns = struct {
		result1 context.Context
	}{result1}
}

func (fake *FakeConnection) ContextReturnsOnCall(i int, result1 context.Context) {
	fake.contextMutex.Lock()
	defer fake.contextMutex.Unlock()
	fake.ContextStub = nil
	if fake.contextReturnsOnCall == nil {
		fake.contextReturnsOnCall = make(map[int]struct {
			result1 context.Context
		})
	}
	fake.contextReturnsOnCall[i] = struct {
		result1 context.Context
	}{result1}
}

func (fake *FakeConnection) ReadJSON(arg1 interface{}) error {
	fake.readJSONMutex.Lock()
	ret, specificReturn := fake.readJSONReturnsOnCall[len(fake.readJSONArgsForCall)]
	fake.readJSONArgsForCall = append(fake.readJSONArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	stub := fake.ReadJSONStub
	fakeReturns := fake.readJSONReturns
	fake.recordInvocation("ReadJSON", []interface{}{arg1})
	fake.readJSONMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConnection) ReadJSONCallCount() int {
	fake.readJSONMutex.RLock()
	defer fake.readJSONMutex.RUnlock()
	return len(fake.readJSONArgsForCall)
}

func (fake *FakeConnection) ReadJSONCalls(stub func(interface{}) error) {
	fake.readJSONMutex.Lock()
	defer fake.readJSONMutex.Unlock()
	fake.ReadJSONStub = stub
}

func (fake *FakeConnection) ReadJSONArgsForCall(i int) interface{} {
	fake.readJSONMutex.RLock()
	defer fake.readJSONMutex.RUnlock()
	argsForCall := fake.readJSONArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConnection) ReadJSONReturns(result1 error) {
	fake.readJSONMutex.Lock()
	defer fake.readJSONMutex.Unlock()
	fake.ReadJSONStub = nil
	fake.readJSONReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConnection) ReadJSONReturnsOnCall(i int, result1 error) {
	fake.readJSONMutex.Lock()
	defer fake.readJSONMutex.Unlock()
	fake.ReadJSONStub = nil
	if fake.readJSONReturnsOnCall == nil {
		fake.readJSONReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.readJSONReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConnection) WriteJSON(arg1 interface{}) error {
	fake.writeJSONMutex.Lock()
	ret, specificReturn := fake.writeJSONReturnsOnCall[len(fake.writeJSONArgsForCall)]
	fake.writeJSONArgsForCall = append(fake.writeJSONArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	stub := fake.WriteJSONStub
	fakeReturns := fake.writeJSONReturns
	fake.recordInvocation("WriteJSON", []interface{}{arg1})
	fake.writeJSONMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConnection) WriteJSONCallCount() int {
	fake.writeJSONMutex.RLock()
	defer fake.writeJSONMutex.RUnlock()
	return len(fake.writeJSONArgsForCall)
}

func (fake *FakeConnection) WriteJSONCalls(stub func(interface{}) error) {
	fake.writeJSONMutex.Lock()
	defer fake.writeJSONMutex.Unlock()
	fake.WriteJSONStub = stub
}

func (fake *FakeConnection) WriteJSONArgsForCall(i int) interface{} {
	fake.writeJSONMutex.RLock()
	defer fake.writeJSONMutex.RUnlock()
	argsForCall := fake.writeJSONArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConnection) WriteJSONReturns(result1 error) {
	fake.writeJSONMutex.Lock()
	defer fake.writeJSONMutex.Unlock()
	fake.WriteJSONStub = nil
	fake.writeJSONReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConnection) WriteJSONReturnsOnCall(i int, result1 error) {
	fake.writeJSONMutex.Lock()
	defer fake.writeJSONMutex.Unlock()
	fake.WriteJSONStub = nil
	if fake.writeJSONReturnsOnCall == nil {
		fake.writeJSONReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeJSONReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConnection) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.contextMutex.RLock()
	defer fake.contextMutex.RUnlock()
	fake.readJSONMutex.RLock()
	defer fake.readJSONMutex.RUnlock()
	fake.writeJSONMutex.RLock()
	defer fake.writeJSONMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConnection) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ websocket.Connection = new(FakeConnection)
